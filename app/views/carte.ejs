<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Carte</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
    <style>
      .leaflet-control-layers-expanded {
        display: block !important;
        width: auto;
        overflow: hidden;
        height: auto;
      }
    
      #mapid {
        height: 400px;
      }
    </style>
    
</head>

<body>

<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <a class="navbar-brand" href="/">Connecta</a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
  </button>
  <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav">
          <li class="nav-item">
              <a class="nav-link" href="/">Accueil </a>
          </li>
          <li class="nav-item">
              <a class="nav-link" href="/profil">Profil</a>
          </li>
          <li class="nav-item">
              <a class="nav-link" href="/forum">Forum</a>
          </li>
          <li class="nav-item active">
              <a class="nav-link" href="/carte">Carte <span class="sr-only">(current)</span></a>
          </li>
          <li class="nav-item">
              <a class="nav-link" href="/data">Données</a>
          </li>
      </ul>
  </div>
</nav>


  <!-- Main content -->
  <div class="container py-5">
    <h1 class="mb-4">Carte</h1>
    <div id="mapid"></div>
  </div>


  <!-- Leaflet JS -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
  <script>
    
    var mymap = L.map('mapid').setView([50.41, 4.444], 13);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors'
    }).addTo(mymap);

    // Initialisation des couches de base
    var baseLayers = {
      "Street Map": L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
      }),
      "Satellite Map": L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
        attribution: '© Esri'
      }),
    };

    // Initialisation des couches superposées
    var overlayLayers = {
      "Commune": L.layerGroup(),
      "Arrondissement": L.layerGroup(),
      "Province": L.layerGroup()
    };

    // Ajout du panneau de contrôle des couches et configuration pour qu'il soit toujours déplié
    var controlLayers = L.control.layers(baseLayers, overlayLayers, { collapsed: false }).addTo(mymap);


    
    var layerStates = {};

    controlLayers._layers.forEach(function (layer) {
      layerStates[layer.name] = false;
    });


    function manage_layer(layerName) {
      if (layerName == 'Commune') {

        var communeLayer = L.layerGroup();
        <% for (let i = 0; i < data.length; i++) { %>
          // Créez le cercle pour la commune
          var circle<%= i %> = L.circle([<%= data[i].coord.long %>, <%= data[i].coord.lat %>], {
            color: 'blue',
            fillColor: '#007bff',
            fillOpacity: 0.5,
            radius: <%= 2000 %>
          });
          // Ajoute le texte au centre du cercle avec style
          var text<%= i %> = L.divIcon({
            className: 'text-label',
            html: '<span style="text-align:center; font-weight:bold;"><%= data[i].number %></span>',
            iconSize: [40, 20]
          });
          // Ajoute le cercle et le texte au layer des communes
          communeLayer.addLayer(circle<%= i %>);
          L.marker([<%= data[i].coord.long %>, <%= data[i].coord.lat %>], { icon: text<%= i %> }).addTo(communeLayer);
        <% } %>
        // Ajoute le layer des communes à la couche "Commune"
        overlayLayers.Commune.addLayer(communeLayer);
    


    }else {
      overlayLayers.Commune.clearLayers(); // Supprimer tous les cercles de la couche des communes
    }
    if (layerName == 'Arrondissement') {
      console.log('Arrondissement is ok');


// Crée un objet pour stocker les communes pour chaque arrondissement
var arrondiss = {};

<% for (let i = 0; i < data.length; i++) { %>
  var arrondissement = '<%= data[i].arrondissement %>';
  var communeName = '<%= data[i].name %>';
  if (arrondiss[arrondissement]) {
    arrondiss[arrondissement].push(communeName);
  } else {
    // Sinon, créez une nouvelle entrée pour cet arrondissement
    arrondiss[arrondissement] = [communeName];
  }
<% } %>

// STEP2 => arrondir les coord et sommer les number des commune pour l'arrondissement
data_to_show = [];
temp_data = {};

for (const add in arrondiss) {
  let list_of_coord = [];
  let total_number = 0; // Initialiser le total des nombres de communes à 0
  arrondiss[add].forEach(element => {
    <% for (let i = 0; i < data.length; i++) { %>
      if ('<%= data[i].arrondissement %>' === add) { // Vérifier si l'arrondissement correspond
        // Récupérer les coordonnées et le nombre de la commune
        const coord = [<%= data[i].coord.long %>, <%= data[i].coord.lat %>];
        const number = <%= data[i].number %>;
        // Ajouter les coordonnées à la liste
        list_of_coord.push(coord);
        // Ajouter le nombre à total_number
        total_number += number;
      }
    <% } %>
  });
// Arrondir les coordonnées
var list_long = [];
var list_lat = [];
for (let coordonny of list_of_coord) {
  list_long.push(coordonny[0]);
  list_lat.push(coordonny[1]);
}

var long_moy = 0;
var lat_moy = 0;
for (let i = 0; i < list_long.length; i++) {
  long_moy += list_long[i];
  lat_moy += list_lat[i];
}

long_moy = long_moy / list_long.length;
lat_moy = lat_moy / list_lat.length;

// Ajouter les données à data_to_show
data_to_show.push({ arrondissement: add, coordinates: { long: long_moy, lat: lat_moy }, totalNumber: total_number });
}

console.log('Données à afficher :');
console.log(data_to_show);

var arrondLayer = L.layerGroup();

for (let data of data_to_show) {
  var circle = L.circle([data.coordinates.long, data.coordinates.lat], {
    color: 'red',
    fillColor: '#007bff',
    fillOpacity: 0.5,
    radius: 4000 // Valeur fixe pour le rayon du cercle
  });

  // Ajoutez le texte au centre du cercle avec style
  var text = L.divIcon({
    className: 'text-label',
    html: '<span style="text-align:center; font-weight:bold;">' + data.totalNumber + '</span>',
    iconSize: [40, 20]
  });

  arrondLayer.addLayer(circle);
  L.marker([data.coordinates.long, data.coordinates.lat], { icon: text }).addTo(arrondLayer);
}

overlayLayers.Arrondissement.addLayer(arrondLayer);




    } else {
      overlayLayers.Arrondissement.clearLayers(); // Supprimer tous les cercles de la couche des arrondissements
    }
    if (layerName == 'Province') {



// Crée un objet pour stocker les communes pour chaque arrondissement
var prov = {};

<% for (let i = 0; i < data.length; i++) { %>
  var province = '<%= data[i].province %>';
  var communeName = '<%= data[i].name %>';
  if (prov[province]) {
    prov[province].push(communeName);
  } else {
    // Sinon, crée une nouvelle entrée pour cet province
    prov[province] = [communeName];
  }
<% } %>

// STEP2 => arrondir les coord et sommer les number des commune pour l'province
data_to_show = [];
temp_data = {};

for (const provin in prov) {
  let list_of_coord = [];
  let total_number = 0; // Initialiser le total des nombres de communes à 0
  prov[provin].forEach(element => {
    <% for (let i = 0; i < data.length; i++) { %>
      if ('<%= data[i].province %>' === provin) { // Vérifier si l'province correspond
        // Récupére les coordonnées et le nombre de la commune
        const coord = [<%= data[i].coord.long %>, <%= data[i].coord.lat %>];
        const number = <%= data[i].number %>;
        // Ajoute les coordonnées à la liste
        list_of_coord.push(coord);
        // Ajoute le nombre à total_number
        total_number += number;
      }
    <% } %>
  });
// Arrondir les coordonnées
var list_long = [];
var list_lat = [];
for (let coordonny of list_of_coord) {
  list_long.push(coordonny[0]);
  list_lat.push(coordonny[1]);
}

var long_moy = 0;
var lat_moy = 0;
for (let i = 0; i < list_long.length; i++) {
  long_moy += list_long[i];
  lat_moy += list_lat[i];
}

long_moy = long_moy / list_long.length;
lat_moy = lat_moy / list_lat.length;

// Ajoute les données à data_to_show
data_to_show.push({ arrondissement: prov, coordinates: { long: long_moy, lat: lat_moy }, totalNumber: total_number });
}

console.log('Données à afficher :');
console.log(data_to_show);

var provLayer = L.layerGroup();

for (let data of data_to_show) {
  var circle = L.circle([data.coordinates.long, data.coordinates.lat], {
    color: 'green',
    fillColor: 'green',
    fillOpacity: 0.5,
    radius: 8000 // Valeur fixe pour le rayon du cercle
  });

  // Ajoute le texte au centre du cercle avec style
  var text = L.divIcon({
    className: 'text-label',
    html: '<span style="text-align:center; font-weight:bold;">' + data.totalNumber + '</span>',
    iconSize: [40, 20]
  });

  provLayer.addLayer(circle);
  L.marker([data.coordinates.long, data.coordinates.lat], { icon: text }).addTo(provLayer);
}

overlayLayers.Province.addLayer(provLayer);





    } else {
      overlayLayers.Province.clearLayers(); // Supprimer tous les cercles de la couche des provinces
    }
}



    mymap.on('overlayadd', function (e) {
      var activatedLayer = e.layer;
      for (var layerName in overlayLayers) {
        if (overlayLayers.hasOwnProperty(layerName) && overlayLayers[layerName] !== activatedLayer) {
          if (controlLayers._layers[layerName]) { // Vérifie si la couche est définie dans le contrôle de couches
            controlLayers._layers[layerName].layer.options.checked = false;
            layerStates[layerName] = false;
            console.log(layerName + ' is unchecked lalal'); // Ajoute le console.log ici
          }
        } else {
          layerStates[layerName] = true;
          manage_layer(layerName)
        }
      }
    });

    mymap.on('overlayremove', function (e) {
      var deactivatedLayer = e.layer;
      for (var layerName in overlayLayers) {
        if (overlayLayers.hasOwnProperty(layerName) && overlayLayers[layerName] === deactivatedLayer) {
          layerStates[layerName] = false;
          console.log(layerName + ' is unchecked'); // Ajoute le console.log ici
        }
      }
    });




  </script>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
</body>

</html>